apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: moonlight-template-microservice-local
  title: Microservice2
  tags:
    - backend
    - microservice
    - moonlight-pipeline
  description: |
    Template for creating backend microservicess
spec:
  owner: squad-atlantis
  type: development

  parameters:
    - title: Base Model
      type: object
      properties:
        useModel:
          title: To create a microservice using a predefined template select the "Use Language/Framework Template" option. Otherwise select "Default Repository" to create a repository with the pipeline settings.
          type: boolean
          oneOf:
            - title: Use Language/Framework Template
              const: true
          default: true
          ui:widget: radio
      required:
        - useModel
      dependencies:
        useModel:
          oneOf:
            - properties:
                useModel:
                  enum:
                    - true
                  ui:widget: radio
                modelName:
                  type: string
                  title: 'Select the base model:'
                  enum:
                    - https://github.com/PicPay/moonlight-template-php-lumen/tree/master
                    - https://github.com/PicPay/moonlight-template-php-laravel
                    - https://github.com/PicPay/moonlight-template-php-hyperf
                    - https://github.com/PicPay/moonlight-template-php-slim4
                    - https://github.com/PicPay/moonlight-template-java-quarkus
                    - https://github.com/PicPay/moonlight-template-java-quarkus-postgres
                    - https://github.com/PicPay/moonlight-template-java-quarkus-mysql
                    - https://github.com/PicPay/moonlight-template-java-spring-gradle
                    - https://github.com/PicPay/moonlight-template-java17-springboot-gradle-clean-architecture
                    - https://github.com/PicPay/moonlight-template-java17-springboot
                    - https://github.com/PicPay/moonlight-template-java17-springboot-cleanarch
                    - https://github.com/PicPay/moonlight-template-kotlin-spring-maven
                    - https://github.com/PicPay/moonlight-template-kotlin-spring-gradle
                    - https://github.com/PicPay/moonlight-template-go-api
                    - https://github.com/PicPay/moonlight-template-golang-bifrost
                    - https://github.com/PicPay/moonlight-template-gandalf-project
                    - https://github.com/PicPay/moonlight-template-javascript-cypress
                    - https://github.com/PicPay/moonlight-template-typescript-jest-qa
                    - https://github.com/PicPay/moonlight-template-node-typescript-nestjs
                    - https://github.com/PicPay/moonlight-template-python-flask
                    - https://github.com/PicPay/moonlight-template-python-fastapi
                    - https://github.com/PicPay/moonlight-template-python-fastapi-neo4j
                  enumNames:
                    - PHP - Lumen
                    - PHP - Laravel
                    - PHP - Hyperf
                    - PHP - Slim
                    - Java 17 - Quarkus - Maven
                    - Java 17 - Quarkus - Maven - Postgres 14
                    - Java 17 - Quarkus - Maven - MySQL 8
                    - Java 17 - Springboot - Gradle
                    - Java 17 - Springboot - Gradle - Clean Architecture
                    - Java 17 - Springboot - Maven
                    - Java 17 - Springboot - Maven - Clean Architecture
                    - Kotlin - Spring - Maven
                    - Kotlin - Spring - Gradle - Event Protocol
                    - Go - API
                    - Go - Bifrost
                    - Go - Gandalf
                    - Node - Cypress - Automação
                    - End2End Tests JEST
                    - Node - Nestjs
                    - Python - Flask
                    - Python - Owl - Fast API
                    - Python - Owl Graph - Neo4J
              required:
                - modelName
            - properties:
                useModel:
                  enum:
                    - false
                  ui:widget: radio

    - title: Basic Information
      required:
        - name
        - ownership
      properties:
        name:
          title: Name
          type: string
          description: |
            You don't need to add the `ms-`in the name, it will be added automatically where needed.
            Just put the name of your service, without picpay, dev, or ms example: validation-scrapers;
            Name of the kebab-case template component;
            Type a minimum of 3 characters and a maximum of 50;
            Lowercase only;
            Don't use accents;
            Don't use numbers;
            Separate words with hyphens;
          maxLength: 50
          minLength: 3
          pattern: '^(?=[a-z|0-9|-])(?!^ms-)(?!picpay-dev-)(?!picpay-dev-ms-)[a-z|0-9|-]*$'
          ui:autofocus: true
          ui:options:
            rows: 5

        ownership:
          title: Ownership
          type: object
          description: |
            Select the Owner, Business Unit and pair of Cluster to be deployed on.
          ui:field: OwnershipComboPicker
          ui:options:
            bu:
              title: 'BU'
              description: 'Business Unit - Business unit linked to the product'
              allowedKinds:
                - Group
              allowedTypes:
                - business-unit
              defaultKind: Group
              useDisplayName: true
              allowArbitraryValues: false
            owner:
              title: Responsible
              description: |
                Squad Name Responsible for the component on Github https://github.com/orgs/PicPay/teams (NOTE: If your team is not listed here, please contact Support on Zendesk to create your team on PicPay's Github Organization)
              allowedKinds:
                - Group
              defaultKind: Group
              allowArbitraryValues: false
            cluster:
              title: Cluster
              description: |
                Pair of clusters to application be deployed on. (NOTE: If your Business Unit doesn't have a pair of clusters, please contact #code-kloud-team on Slack)
              allowedKinds:
                - Resource
              allowedTypes:
                - eks
              groupBy:
                type: suffix
                values:
                  - key: '-prd'
                    alias: production
                  - key: '-hom'
                    alias: homolog
              defaultKind: Resource
              allowArbitraryValues: false
            info:
              text: 'For now, your Component will use a standarized and shared NodeAffinity and this is dangerous for critical applications, if you feel like is something that you want to change, please contact your SRE after the creation of the Component is complete.'
              link:
                text: 'Click here for more information'
                url: 'https://picpay.atlassian.net/wiki/spaces/MOON/pages/2834956313/Node+Affinity'

    - title: Documentation
      required:
        - description
        - jiraboard
        - confluencedocs
      properties:
        description:
          title: Description
          type: string
          description: |
            What is the purpose of this service?
        jiraboard:
          title: Jira Board
          type: string
          pattern: ^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$
          description: |
            Link to the board of the team responsible for this service.
        confluencedocs:
          title: Confluence Docs
          type: string
          pattern: ^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$
          description: |
            Link to the documentation for this service on Confluence.
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: .
        copyWithoutTemplating:
          - template.yaml
        values:
          name: 'ms-${{ parameters.name }}'
          owner: '${{ parameters.ownership.owner }}'
          cluster: '${{ parameters.ownership.cluster }}'
          bu: '${{ parameters.ownership.bu }}'
          affinity: '${{ parameters.ownership.affinity }}'
          vaultRoleName: 'role-reader-app'
          resources: '${{ parameters.resources }}'
          dependencies: '${{ parameters.dependencies }}'
          description: '${{ parameters.description }}'
          jiraboard: '${{ parameters.jiraboard }}'
          confluencedocs: '${{ parameters.confluencedocs }}'

    - id: fetch-model
      if: '${{ parameters.useModel }}'
      name: Fetch Model
      action: fetch:template
      input:
        url: '${{ parameters.modelName }}'
        targetPath: ./repository
        values:
          name: 'ms-${{ parameters.name }}'
          owner: '${{ parameters.ownership.owner }}'
          cluster: '${{ parameters.ownership.cluster }}'
          bu: '${{ parameters.ownership.bu }}'
          affinity: '${{ parameters.ownership.affinity }}'
          vaultRoleName: 'role-reader-app'
          resources: '${{ parameters.resources }}'
          dependencies: '${{ parameters.dependencies }}'
          description: '${{ parameters.description }}'
          jiraboard: '${{ parameters.jiraboard }}'
          confluencedocs: '${{ parameters.confluencedocs }}'

    - id: publish
      name: Creating Github Repository
      action: publish:github
      if: ${{ parameters.ownership.validate_microservice }}
      input:
        sourcePath: ./repository
        allowedHosts: ['github.com']
        description: '${{ parameters.description }}'
        repoUrl: 'github.com?owner=PicPay&repo=ms-${{ parameters.name }}'
        repoVisibility: internal
        defaultBranch: main
        collaborators:
          - team: deploy-pipeline
            access: admin
          - team: devops
            access: admin
          - team: backend
            access: push
          - team: '${{ parameters.ownership.owner }}'
            access: push
          - team: backend-reviewers
            access: pull
          - team: backend-admins
            access: admin
          - team: squad-atlantis
            access: admin

    - id: publish_infra
      name: Creating Github Infra's Repository
      if: ${{ parameters.ownership.validate_infra }}
      action: publish:github
      input:
        sourcePath: ./repository-infra
        allowedHosts: ['github.com']
        description: '${{ parameters.description }}'
        repoUrl: 'github.com?owner=PicPay&repo=ms-${{ parameters.name }}-infra'
        repoVisibility: internal
        defaultBranch: main
        collaborators:
          - team: deploy-pipeline
            access: admin
          - team: devops
            access: admin
          - team: backend
            access: push
          - team: '${{ parameters.ownership.owner }}'
            access: push
          - team: backend-reviewers
            access: pull
          - team: backend-admins
            access: admin
          - team: squad-atlantis
            access: admin

    - id: register
      name: Register Moonlight
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

    - id: register_infra
      name: Register Moonlight
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish_infra.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

    - id: gh_branch_unprotection_infra
      name: GitHub Infra Branch Unprotection
      action: moonlight:branch-protection
      input:
        repo: ms-${{ parameters.name }}-infra
        branch: main
        enforceAdmins: false

    - id: helmchart
      name: Creating Infra's Helmchart definitions
      action: moonlight:infra-helmcharts
      input:
        serviceName: 'ms-${{ parameters.name }}-infra'
        skipDepUp: true
        valuesFilePath:
          - repository/values.qa.yaml
          - repository/values.prod.yaml
        bu: '${{ parameters.ownership.bu }}'
        vaultRoleName: '${{ parameters.vaultRoleName }}'

    - id: gh_ci_webhook
      name: Register CI Webhook
      action: github:webhook
      input:
        repoUrl: 'github.com?owner=PicPay&repo=ms-${{ parameters.name }}'
        webhookUrl: 'https://tekton-webhook.prd-hub-virginia.k8s.hub.picpay.cloud/microservices'
        contentType: json
        events:
          - create
          - label
          - pull_request
          - push
          - release

    - id: gh_ci_webhook_infra
      name: Register CI Webhook on Infra's Repository
      action: github:webhook
      input:
        repoUrl: 'github.com?owner=PicPay&repo=ms-${{ parameters.name }}-infra'
        webhookUrl: 'https://webhook-tekton.prd-hub-virginia.k8s.hub.picpay.cloud'
        webhookSecret: '0G9E0Aa8f680bZlr7FpF%BHW#N&M^xgA1rN%12RfDhGkR98pWv' # it's not a sensitive information
        contentType: json
        events:
          - pull_request

    - id: gh_branch_protection
      name: GitHub Branch Protection
      action: moonlight:branch-protection
      input:
        repo: ms-${{ parameters.name }}
        branch: main
        statusChecks:
          - ci/unit-tests
          - ci/start-sonar
          - ci/image-build
          - cd/gmud-approval

    - id: gh_branch_protection_infra
      name: GitHub Infra Branch Protection
      action: moonlight:branch-protection
      input:
        repo: ms-${{ parameters.name }}-infra
        branch: main
        bypasses:
          apps:
            - MoonlightPipeline-Deploy

    - id: argocd-hom
      if: ${{ parameters.ownership.cluster.homolog }}
      name: Creating app on ArgoCD [homolog]
      action: moonlight:push-to-branch
      input:
        cwd: argocd
        paths:
          - ./apps/ms-${{ parameters.name }}/hom
        repo: moonligh-template-local
        targetBranch: local/add-ms-${{ parameters.name }}
        baseBranch: main
        commitMsg: Adds service settings ms-${{ parameters.name }}

    - id: argocd-prd
      if: ${{ parameters.ownership.cluster.production }}
      name: Creating app on ArgoCD [production]
      action: moonlight:push-to-branch
      input:
        cwd: argocd
        paths:
          - ./apps/ms-${{ parameters.name }}/prd
        repo: moonligh-template-local
        targetBranch: local/add-ms-${{ parameters.name }}
        baseBranch: main
        commitMsg: Adds service settings ms-${{ parameters.name }}

    - id: ecr
      name: Creating ECR
      action: moonlight:push-to-branch
      input:
        cwd: terraform/ecr
        paths:
          - .
        repo: moonligh-template-local
        targetBranch: local/add-ms-${{ parameters.name }}
        baseBranch: main
        commitMsg: Creating ECR for the service ms-${{ parameters.name }}

    - id: envs_vault
      name: Creating Secrets on Vault
      action: moonlight:vault
      input:
        serviceName: ms-${{ parameters.name }}
        bu: '${{ parameters.ownership.bu }}'
        environments:
          - hom
          - prd
        envs:
          - name: ${{ parameters.name }}_NEW_RELIC_APP_NAME
            value: ms-${{ parameters.name }}

    - id: sonar
      name: Creating Sonar Project
      action: moonlight:sonar
      input:
        repo: ms-${{ parameters.name }}

    - id: observability
      name: Creating Observability Project
      action: moonlight:observability
      input:
        repo: 'ms-${{ parameters.name }}'

    - id: finish
      name: Finish
      action: moonlight:writer
      input:
        messages:
          - '---------------------------'
          - 'Congratulations!'
          - 'Your service has been successfully created!'
          - 'It is available at the link below:'
          - 'Service Repository: https://github.com/PicPay/ms-${{ parameters.name }}'
          - "Infra's Service Repository: https://github.com/PicPay/ms-${{ parameters.name }}-infra"
          - 'A PR for the ArgoCD repository is available at: https://github.com/PicPay/moonligh-template-local'
          - 'For questions access our confluence at:'
          - 'https://picpay.atlassian.net/wiki/spaces/PENG/pages/2309391225/Moonlight'
          - 'or look for the @atlantis team on slack'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Webhook Output
        url: ${{ integrations.webhookSecret }}
      - title: Infra's Repository
        url: ${{ steps.publish_infra.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
